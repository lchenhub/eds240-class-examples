---
title: "Lecture 1.3"
date: 2024-01-08
editor_options:
  chunk_output_type: console
---

## Tidy data
```{r}
#..........................load packages.........................
library(tidyverse)
library(janitor)
library(palmerpenguins)

```

```{r}
# untidy data ----
temp_data_wide <- tribble(
  ~date, ~station1, ~station2,  ~station3,
  "2023-10-01", 30.1, 29.8,  31.2, #reminder that numeric includes decimals, while int does not
  "2023-11-01", 28.6, 29.1,  33.4,
  "2023-12-01", 29.9, 28.5,  32.3
)

# make tidy ----
temp_data_long <- temp_data_wide |> 
  pivot_longer(cols = starts_with("station"),
               names_to = "station_id", 
               values_to = "temp_c")
```

Initial wrangling steps:
> View(penguins)
> str(penguins)
> unique(penguins$species)
> length(unique(penguins$species))

## Plot 1
```{r}
#mapping color globally
ggplot(na.omit(penguins), #ggplot lets you drop the data and mapping arguments
       mapping = aes(x = bill_length_mm,
                     y = bill_depth_mm,
                     color = species)) +
  geom_point() +
  geom_smooth(method = "lm") 

#if you want to color points based on another variable in dataset, then you need to define it within the aes() function. any time you want to define your variable within your aes, it needs to live within the aes() later



#mapping color locally
ggplot(na.omit(penguins), #ggplot lets you drop the data and mapping arguments
       mapping = aes(x = bill_length_mm,
                     y = bill_depth_mm
                    )) +
  geom_point(aes(color = species)) +
  geom_smooth(method = "lm") +
  scale_color_manual(values = c("darkorange", "purple", "cyan4"))

#piping into a ggplot ----
# penguins |>
#   ggplot(aes(x = bill_length_mm, y = bill_length_mm))

# ggplot() +
#   geom_point(data = penguins,
#              mapping = aes(x = bill_length_mm,
#                            y = bill_depth_mm))

#create a color scale gradient
ggplot(penguins, aes(x = body_mass_g, 
                     y = flipper_length_mm, 
                     color = body_mass_g)) +
  geom_point() +
  scale_color_gradient(low = "#132843", high = "#F7DD4C")
```


## Plot 2
```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar() #counts total of observations for each species
```

Overriding geom_bar's stat:
```{r}
#will summarize counts by species in table
penguins_summary <- penguins |>
  count(species)

ggplot(penguins_summary, aes(x = species, y = n)) +
  geom_bar(stat = "identity")
```

Override default stat mapping:
```{r}
#instead of plotting counts, plot proportion
ggplot(penguins, aes(x = species, y = after_stat(prop),
                     group = 1)) + #this actually plot proportion (like divided by total 1)
  geom_bar()
```

position adjustments
```{r}
ggplot(penguins, aes(x = species, fill = island)) + #if not mapping correctly, see if color or fill is being used
  geom_bar(position = "fill") #this makes stacks proportional. you can also use position = "dodge", which separates columns. geom_bar(position = position_dodge2(preserve = "single"))
```

```{r}
ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar(position = position_dodge2(preserve = "single")) #this makes stacks proportional. you can also use position = "dodge", which separates columns. geom_bar(position = position_dodge2(preserve = "single"))
```


Coordinate systems
```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar() +
  coord_polar()
```

Coordinate systems + themes
```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar() +
  coord_flip() +
  theme_classic() +
  theme(
    axis.title = element_text(size = 17, color = "purple")
  )

```